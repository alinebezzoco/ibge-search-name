{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","query","setQuery","nameInfos","setNameInfos","focusSearch","useRef","useEffect","current","focus","getInfos","a","async","fetch","headers","accept","results","json","nameInfosData","currentQuery","controller","AbortController","loadNameInfos","abort","nameInfoComponent","map","nameInfo","res","item","i","formattedPeriod","periodo","replace","formattedFrequency","frequencia","key","placeholder","ref","onChange","e","target","value","length","className","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCHD,WAAmB,IAAD,EACLC,mBAAS,IADJ,mBACxBC,EADwB,KACjBC,EADiB,OAEGF,mBAAS,IAFZ,mBAExBG,EAFwB,KAEbC,EAFa,KAGzBC,EAAcC,iBAAO,MAE3BC,qBAAU,WACRF,EAAYG,QAAQC,UACnB,IAEH,IAAMC,EAAW,SAAMT,GAAN,iBAAAU,EAAAC,OAAA,kEAAAD,EAAA,MACOE,MAAM,wDAAD,OAC+BZ,GACxD,CACEa,QAAS,CAAEC,OAAQ,uBAJR,cACTC,EADS,kBAAAL,EAAA,MAOaK,EAAQC,QAPrB,cAOTC,EAPS,yBAQRA,GARQ,sCAWjBX,qBAAU,WACR,IAAIY,GAAe,EACbC,EAAa,IAAIC,gBAYvB,OAVsB,mBAAAV,EAAAC,OAAA,mDACfX,EADe,yCACDG,EAAa,KADZ,WAGhBe,EAHgB,kCAAAR,EAAA,MAIMD,EAAST,IAJf,OAIZE,EAJY,OAKlBC,EAAaD,GALK,qCAQtBmB,GAEO,WACLH,GAAe,EACfC,EAAWG,WAEZ,CAACtB,IAEJ,IAAIuB,EAAoBrB,EAAUsB,KAAI,SAAAC,GACpC,OAAOA,EAASC,IAAIF,KAAI,SAACG,EAAMC,GAC7B,IAAMC,EAAkBF,EAAKG,QAC1BC,QAAQ,OAAQ,IAChBA,QAAQ,IAAK,KACVC,EAAkB,UAAML,EAAKM,WAAX,IAAyB,qBACjD,OACE,wBAAIC,IAAKN,GACP,4BAAKC,GADP,IAC6B,4BAAKG,UAMxC,OACE,oCACE,gCACE,sDACA,4JAKF,8BACE,2BACEG,YAAY,2DACZC,IAAKhC,EACLiC,SAAU,SAAAC,GAAC,OAAIrC,EAASqC,EAAEC,OAAOC,QACjCA,MAAOxC,KAIX,+BACGA,EAAMyC,OAAS,GACd,oCACE,+BACE,4BACE,0CACA,+CAGJ,+BACGlB,EAAkBkB,OAAS,EAC1BlB,EAEA,wBAAImB,UAAU,aAAd,6CDlFA,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a14a3eb1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nexport default function Search() {\n  const [query, setQuery] = useState(\"\");\n  const [nameInfos, setNameInfos] = useState([]);\n  const focusSearch = useRef(null);\n\n  useEffect(() => {\n    focusSearch.current.focus();\n  }, []);\n\n  const getInfos = async query => {\n    const results = await fetch(\n      `https://servicodados.ibge.gov.br/api/v2/censos/nomes/${query}`,\n      {\n        headers: { accept: \"application/json\" }\n      }\n    );\n    const nameInfosData = await results.json();\n    return nameInfosData;\n  };\n\n  useEffect(() => {\n    let currentQuery = true;\n    const controller = new AbortController();\n\n    const loadNameInfos = async () => {\n      if (!query) return setNameInfos([]);\n\n      if (currentQuery) {\n        const nameInfos = await getInfos(query, controller);\n        setNameInfos(nameInfos);\n      }\n    };\n    loadNameInfos();\n\n    return () => {\n      currentQuery = false;\n      controller.abort();\n    };\n  }, [query]);\n\n  let nameInfoComponent = nameInfos.map(nameInfo => {\n    return nameInfo.res.map((item, i) => {\n      const formattedPeriod = item.periodo\n        .replace(/[[]/g, \"\")\n        .replace(\",\", \"-\");\n      const formattedFrequency = `${item.frequencia} ${\"nomes registrados\"}`;\n      return (\n        <tr key={i}>\n          <td>{formattedPeriod}</td> <td>{formattedFrequency}</td>\n        </tr>\n      );\n    });\n  });\n\n  return (\n    <>\n      <header>\n        <h1>Meu nome é popular?</h1>\n        <p>\n          Saiba se o seu nome já foi ou é popular durante algum período no\n          Brasil de acordo com os dados extraídos do IBGE\n        </p>\n      </header>\n      <form>\n        <input\n          placeholder=\"Digite o seu nome ou qualquer outro que queira pesquisar\"\n          ref={focusSearch}\n          onChange={e => setQuery(e.target.value)}\n          value={query}\n        />\n      </form>\n\n      <table>\n        {query.length > 0 && (\n          <>\n            <thead>\n              <tr>\n                <th>Período</th>\n                <th>Frequência</th>\n              </tr>\n            </thead>\n            <tbody>\n              {nameInfoComponent.length > 0 ? (\n                nameInfoComponent\n              ) : (\n                <tr className=\"not-found\">\n                  Nenhuma informação encontrada\n                </tr>\n              )}\n            </tbody>\n          </>\n        )}\n      </table>\n    </>\n  );\n}\n"],"sourceRoot":""}